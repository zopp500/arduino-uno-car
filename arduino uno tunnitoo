#include <Servo.h>
Servo servo;

// Ultraheli mooduli pin'id
const int trigPin = 13; // 10 mikrosekundi pikkune kõrge impuls muudab sensorit, ootab 50 ms
const int echoPin = 12; // Kõrge impulsi kestus näitab kaugust

// Servo mootor, mis suunab ultraheli sensori
const int servoPin = 11; // PWM väljund hobi servo jaoks

// Mootori juhtimise pin'id: L298N H-sild
const int enAPin = 6; // Vasaku mootori PWM kiiruskontroll
const int in1Pin = 7; // Vasaku mootori suund 1
const int in2Pin = 5; // Vasaku mootori suund 2
const int in3Pin = 4; // Parem mootori suund 1
const int in4Pin = 2; // Parem mootori suund 2
const int enBPin = 3; // Parem mootori PWM kiiruskontroll

enum Motor { LEFT, RIGHT };

// Määrab mootori kiirus: 255 täis edasi, −255 täis tagasi, 0 seisab
void go(Motor m, int speed) {
  digitalWrite(m == LEFT ? in1Pin : in3Pin, speed > 0 ? HIGH : LOW);
  digitalWrite(m == LEFT ? in2Pin : in4Pin, speed <= 0 ? HIGH : LOW);
  analogWrite(m == LEFT ? enAPin : enBPin, speed < 0 ? -speed : speed);
}

// Algne mootori test:
// vasak mootor edasi ja siis tagasi
// parem mootor edasi ja siis tagasi
void testMotors() {
  static int speed[8] = { 128, 255, 128, 0, -128, -255, -128, 0 };

  go(RIGHT, 0);
  for (unsigned char i = 0; i < 8; i++)
    go(LEFT, speed[i]), delay(200);
  for (unsigned char i = 0; i < 8; i++)
    go(RIGHT, speed[i]), delay(200);
}

// Loeb kauguse ultraheli sensorilt, tagastab kauguse millimeetrites
// Helikiirus kuivõhu puhul, 20°C on 343 m/s
// pulseIn tagastab aja mikrosekundites (10^-6)
// 2d = p * 10^-6 s * 343 m/s = p * 0.00343 m = p * 0.343 mm/us
unsigned int readDistance() {
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  unsigned long period = pulseIn(echoPin, HIGH);
  return period * 343 / 2000;
}

#define NUM_ANGLES 7
unsigned char sensorAngle[NUM_ANGLES] = { 60, 70, 80, 90, 100, 110, 120 };
unsigned int distance[NUM_ANGLES];

// Skaneerib eesolevat ala, liigutades ultraheli sensori vasakule ja paremale
// ning salvestades kauguse. See teeb ühe lugemise ja siis viib servo järgmise nurga juurde.
// Kutsuge seda iga 50 ms järel.
void readNextDistance() {
  static unsigned char angleIndex = 0;
  static signed char step = 1;

  distance[angleIndex] = readDistance();
  angleIndex += step;
  if (angleIndex == NUM_ANGLES - 1) step = -1;
  else if (angleIndex == 0) step = 1;
  servo.write(sensorAngle[angleIndex]);
}

// Algkonfiguratsioon
// Määrake sisendi ja väljundi pin'id
// Keskendage servo
// Lülitage mootoreid välja
// Testige mootoreid
// Skaneerige ümbritsevat ala üks kord
void setup() {
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  digitalWrite(trigPin, LOW);

  pinMode(enAPin, OUTPUT);
  pinMode(in1Pin, OUTPUT);
  pinMode(in2Pin, OUTPUT);
  pinMode(in3Pin, OUTPUT);
  pinMode(in4Pin, OUTPUT);
  pinMode(enBPin, OUTPUT);

  servo.attach(servoPin);
  servo.write(90);  // Keskendage servo

  go(LEFT, 0);
  go(RIGHT, 0);

  testMotors();

  // Skaneerige ümbritsevat ala enne alustamist
  servo.write(sensorAngle[0]);
  delay(200);
  for (unsigned char i = 0; i < NUM_ANGLES; i++)
    readNextDistance(), delay(200);
}

// Põhiring:
// Saage järgmine sensori lugemine
// Kui midagi on liiga lähedal, liikuge tagasi
// Kui mitte, liikuge edasi
void loop() {
  readNextDistance();

  // Kontrollige, kas midagi on liiga lähedal mõnes nurgas
  unsigned char tooClose = 0;
  for (unsigned char i = 0; i < NUM_ANGLES; i++) {
    if (distance[i] < 300) {
      tooClose = 1;
    }
  }

  if (tooClose) {
    // Midagi on lähedal: liigu tagasi vasakule
    go(LEFT, -180);
    go(RIGHT, -80);
  } else {
    // Ei midagi ees: liigu edasi
    go(LEFT, 255);
    go(RIGHT, 255);
  }

  // Kontrollige järgmine suund 50 ms pärast
  delay(50);
}
